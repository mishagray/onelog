// Generated by CoffeeScript 1.12.5
(function() {
  var Caterpillar, Console, Library, Log4js, Logger, Logule, Tracer, Winston, _, _defaultLogger, _library, config, getCallerFile, path, stackTrace, start, stop, timers,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  timers = {};

  config = {
    methods: ['debug', 'info', 'notice', 'warning', 'error', 'crit', 'alert', 'emerg', 'trace', 'log', 'warn', 'line', 'time', 'timeEnd', 'profile', 'assert', 'log', 'fatal', 'dir', 'start', 'stop', 'isLevelEnabled']
  };

  start = function(label) {
    return timers[label] = Date.now();
  };

  stop = function(label) {
    var duration;
    duration = Date.now() - timers[label];
    return duration;
  };

  Logger = (function() {
    function Logger(logger1) {
      var fn, i, len, method, ref;
      this.logger = logger1;
      this.enabled = true;
      ref = config.methods;
      fn = (function(_this) {
        return function(method) {
          return Logger.prototype[method] = function() {
            var a, defaultMethod, ref1, ref2;
            a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            if (!this.enabled) {
              return;
            }
            if (method === 'start') {
              return start.apply(null, a);
            } else if (method === 'stop') {
              return stop.apply(null, a);
            } else if (method === 'time') {
              return start.apply(null, a);
            } else if (method === 'timeEnd') {
              return this.logger.debug(a + ": " + (stop.apply(null, a)) + "ms");
            } else if (this.logger[method] != null) {
              return (ref1 = this.logger)[method].apply(ref1, a);
            } else {
              defaultMethod = GLOBAL.onelog._library.defaultLevel();
              return (ref2 = this.logger)[defaultMethod].apply(ref2, a);
            }
          };
        };
      })(this);
      for (i = 0, len = ref.length; i < len; i++) {
        method = ref[i];
        fn(method);
      }
    }

    Logger.prototype.suppress = function(level) {
      return this.enabled = false;
    };

    Logger.prototype.allow = function(level) {
      return this.enabled = true;
    };

    return Logger;

  })();

  Library = (function() {
    function Library() {}

    Library.prototype.getLogger = function(category) {};

    Library.prototype.get = function() {};

    Library.prototype.getOpts = function() {};

    Library.prototype.getLibraryInstance = function() {};

    Library.prototype.middleware = function(opts) {
      return function(req, res, next) {
        return next();
      };
    };

    Library.prototype.defaultLevel = function() {
      if (this.log != null) {
        return 'log';
      } else if (this.info != null) {
        return 'info';
      } else {
        throw new Error('Could not find a default level to fallback to');
      }
    };

    return Library;

  })();

  Console = (function(superClass) {
    extend(Console, superClass);

    function Console() {}

    Console.prototype.get = function(category) {
      return new Logger(console);
    };

    Console.prototype.defaultLevel = function() {
      return 'log';
    };

    return Console;

  })(Library);

  _library = void 0;

  _defaultLogger = void 0;

  stackTrace = require('stack-trace');

  path = require('path');

  getCallerFile = function() {
    var file, frame, line, method;
    frame = stackTrace.get()[2];
    file = frame.getFileName();
    line = frame.getLineNumber();
    method = frame.getFunctionName();
    return (frame.getTypeName()) + " " + file + ": " + line + " in " + method + "()";
  };

  exports.use = function(clazz, opts) {
    var i, k, len, method, ref, results;
    if (opts == null) {
      opts = {};
    }
    for (k in Library.prototype) {
      if (!(clazz != null ? clazz.prototype[k] : void 0)) {
        throw new Error("Invalid logging library prototype. You must pass in a class with a prototype that adheres to Library.");
      }
    }
    if (GLOBAL.onelog == null) {
      GLOBAL.onelog || (GLOBAL.onelog = {});
      GLOBAL.onelog._library = _library = new clazz(opts.lib);
      GLOBAL.onelog._defaultLogger = _defaultLogger = _library.get();
      console.log("OneLog is using logging library " + clazz.name + " - Initialized from " + (getCallerFile(arguments)));
    } else {
      _library = GLOBAL.onelog._library;
      _defaultLogger = GLOBAL.onelog._defaultLogger;
    }
    if (GLOBAL.onelog._library.getOpts() != null) {
      config.methods = _.union(config.methods, GLOBAL.onelog._library.getOpts().methods);
    }
    if ((opts != null ? opts.methods : void 0) != null) {
      config.methods = _.union(config.methods, opts.methods);
    }
    ref = config.methods;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      method = ref[i];
      results.push((function(_this) {
        return function(method) {
          return exports[method] = function() {
            var a;
            a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _defaultLogger[method].apply(_defaultLogger, a);
          };
        };
      })(this)(method));
    }
    return results;
  };

  exports.get = function(category) {
    if (GLOBAL.onelog == null) {
      exports.use(Console);
    }
    return GLOBAL.onelog._library.get(category);
  };

  exports.sub = function() {
    var namespaces;
    namespaces = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return GLOBAL.onelog._library.sub;
  };

  exports.middleware = function(opts) {
    return GLOBAL.onelog._library.middleware(opts);
  };

  exports.getLibrary = function() {
    var ref;
    return (ref = GLOBAL.onelog._library) != null ? ref.getLibrary() : void 0;
  };

  Log4js = (function(superClass) {
    extend(Log4js, superClass);

    Log4js.prototype.name = 'Log4js';

    function Log4js(log4js) {
      this.log4js = log4js;
      if (this.log4js == null) {
        this.log4js = require('log4js');
      }
    }

    Log4js.prototype.get = function(category) {
      if (category) {
        return new Logger(this.log4js.getLogger(category));
      } else {
        return new Logger(this.log4js.getDefaultLogger());
      }
    };

    Log4js.prototype.getOpts = function() {
      return {
        methods: 'setLevel'
      };
    };

    Log4js.prototype.getLibrary = function() {
      return this.log4js;
    };

    Log4js.prototype.middleware = function(opts) {
      var category, level;
      category = (opts != null ? opts.category : void 0) || 'Middleware';
      level = (opts != null ? opts.level : void 0) || this.log4js.levels.INFO;
      return this.log4js.connectLogger(this.log4js.getLogger(category), {
        level: level
      });
    };

    Log4js.prototype.defaultLevel = function() {
      return 'info';
    };

    return Log4js;

  })(Library);

  Logule = (function(superClass) {
    extend(Logule, superClass);

    Logule.prototype.name = 'Logule';

    function Logule() {
      this.logule = require('logule');
    }

    Logule.prototype.get = function(category) {
      if (category) {
        return new Logger(this.logule.sub(category));
      } else {
        return new Logger(this.logule);
      }
    };

    Logule.prototype.middleware = function(opts) {
      var category, level;
      category = (opts != null ? opts.category : void 0) || 'Middleware';
      level = (opts != null ? opts.level : void 0) || 'trace';
      return function(req, res, next) {
        expressLogger[level](req.method, req.url.toString());
        return next();
      };
    };

    return Logule;

  })(Library);

  Winston = (function(superClass) {
    extend(Winston, superClass);

    Winston.prototype.name = 'Winston';

    function Winston() {
      this.winston = require('winston');
    }

    Winston.prototype.get = function(category) {
      var logger;
      logger = null;
      if (category) {
        logger = new Logger(this.winston.loggers.add(category, {
          console: {
            level: 'silly',
            colorize: true
          }
        }));
      } else {
        logger = this.winston;
      }
      return logger;
    };

    Winston.prototype.middleware = function(opts) {
      this.expressWinston = require('express-winston');
      if ((opts != null ? opts.winston.type : void 0) === 'error') {
        return this.expressWinston.errorLogger({
          transports: [
            new this.winston.transports.Console({
              json: true,
              colorize: true
            })
          ]
        });
      }
      if ((opts != null ? opts.winston.type : void 0) === 'request') {
        return this.expressWinston.logger({
          transports: [
            new this.winston.transports.Console({
              json: true,
              colorize: true
            })
          ]
        });
      }
    };

    return Winston;

  })(Library);

  Caterpillar = (function(superClass) {
    extend(Caterpillar, superClass);

    Caterpillar.prototype.name = 'Caterpillar';

    function Caterpillar() {
      this.caterpillar = require('caterpillar');
    }

    Caterpillar.prototype.get = function(category) {
      return new Logger(new this.caterpillar.Logger);
    };

    return Caterpillar;

  })(Library);

  Tracer = (function(superClass) {
    extend(Tracer, superClass);

    function Tracer() {
      this.tracer = require('tracer');
    }

    Tracer.prototype.get = function(category) {
      return new Logger(this.tracer.colorConsole());
    };

    return Tracer;

  })(Library);

  exports.Logule = Logule;

  exports.Log4js = Log4js;

  exports.Winston = Winston;

  exports.Caterpillar = Caterpillar;

  exports.Tracer = Tracer;

}).call(this);
